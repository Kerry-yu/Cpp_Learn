#include<iostream>
#include<string>
#include<list>
using namespace std;

//list容器 排序案例 对于自定义数据类型

class Person
{
public:
	Person(string name, int age, int height)
	{
		this->m_Name = name;
		this->m_Age = age;
		this->m_Height = height;
	}

public:
	string m_Name;//姓名
	int m_Age;//年龄
	int m_Height;//身高

};

void printList(list<Person>& p)
{
	for (list<Person>::iterator it = p.begin(); it != p.end(); it++)
	{
		cout << "姓名：" << (*it).m_Name << "  年龄：" << (*it).m_Age << "  身高：" << (*it).m_Height << endl;
	}
}

//指定排序规则
bool comparePerson(Person& p1, Person& p2)
{
	//年龄相同 按身高降序
	if (p1.m_Age == p2.m_Age)
	{
		return p1.m_Height > p2.m_Height;
	}
	//按照年龄 升序
	return p1.m_Age < p2.m_Age;
}

void test01()
{
	list<Person> L;

	Person p1("刘备", 35, 175);
	Person p2("关羽", 35, 200);
	Person p3("张飞", 35, 160);
	Person p4("赵云", 25, 190);
	Person p5("孙权", 40, 170);
	Person p6("曹操", 45, 180);

	L.push_back(p1);
	L.push_back(p2);
	L.push_back(p3);
	L.push_back(p4);
	L.push_back(p5);
	L.push_back(p6);

	printList(L);


	//排序
	cout << "--------------------------";
	cout << "排序后：" << endl;

	L.sort(comparePerson);

	printList(L);

}

int main()
{
	test01();

	return 0;
}